// <auto-generated />
using System;
using Data.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.DataLayer.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.EntityModels.Address", b =>
                {
                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RealEsid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("HoodId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Data.EntityModels.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Residential"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Commercial"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Industrial"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Land"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Multi-Family"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Retail"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Office"
                        },
                        new
                        {
                            Id = "8",
                            Name = "Mixed-Use"
                        },
                        new
                        {
                            Id = "9",
                            Name = "Agricultural"
                        },
                        new
                        {
                            Id = "10",
                            Name = "Hospitality"
                        });
                });

            modelBuilder.Entity("Data.EntityModels.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CountryId = "1",
                            Name = "New York"
                        },
                        new
                        {
                            Id = "2",
                            CountryId = "1",
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = "3",
                            CountryId = "1",
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = "4",
                            CountryId = "2",
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = "5",
                            CountryId = "2",
                            Name = "Vancouver"
                        },
                        new
                        {
                            Id = "6",
                            CountryId = "3",
                            Name = "London"
                        },
                        new
                        {
                            Id = "7",
                            CountryId = "3",
                            Name = "Manchester"
                        },
                        new
                        {
                            Id = "8",
                            CountryId = "4",
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = "9",
                            CountryId = "4",
                            Name = "Munich"
                        },
                        new
                        {
                            Id = "10",
                            CountryId = "5",
                            Name = "Paris"
                        },
                        new
                        {
                            Id = "11",
                            CountryId = "5",
                            Name = "Lyon"
                        },
                        new
                        {
                            Id = "12",
                            CountryId = "6",
                            Name = "Madrid"
                        },
                        new
                        {
                            Id = "13",
                            CountryId = "6",
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = "14",
                            CountryId = "7",
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = "15",
                            CountryId = "7",
                            Name = "Melbourne"
                        },
                        new
                        {
                            Id = "16",
                            CountryId = "8",
                            Name = "Rome"
                        },
                        new
                        {
                            Id = "17",
                            CountryId = "8",
                            Name = "Milan"
                        },
                        new
                        {
                            Id = "18",
                            CountryId = "9",
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = "19",
                            CountryId = "9",
                            Name = "Osaka"
                        },
                        new
                        {
                            Id = "20",
                            CountryId = "10",
                            Name = "Rio de Janeiro"
                        });
                });

            modelBuilder.Entity("Data.EntityModels.Comments", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealEsid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RealEsid");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Data.EntityModels.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "United States"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = "3",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = "5",
                            Name = "France"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = "8",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = "9",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = "10",
                            Name = "Brazil"
                        });
                });

            modelBuilder.Entity("Data.EntityModels.Favorite", b =>
                {
                    b.Property<string>("RealEsid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RealEsid", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Data.EntityModels.Feature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Gym"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Garden"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Garage"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Fireplace"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Security System"
                        },
                        new
                        {
                            Id = "8",
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = "9",
                            Name = "Elevator"
                        },
                        new
                        {
                            Id = "10",
                            Name = "Jacuzzi"
                        },
                        new
                        {
                            Id = "11",
                            Name = "Sauna"
                        },
                        new
                        {
                            Id = "12",
                            Name = "Home Office"
                        },
                        new
                        {
                            Id = "13",
                            Name = "Roof Deck"
                        },
                        new
                        {
                            Id = "14",
                            Name = "Private Parking"
                        },
                        new
                        {
                            Id = "15",
                            Name = "Hardwood Floors"
                        },
                        new
                        {
                            Id = "16",
                            Name = "In-Unit Laundry"
                        },
                        new
                        {
                            Id = "17",
                            Name = "Smart Home Technology"
                        },
                        new
                        {
                            Id = "18",
                            Name = "Walk-In Closet"
                        },
                        new
                        {
                            Id = "19",
                            Name = "Barbecue Area"
                        },
                        new
                        {
                            Id = "20",
                            Name = "Wine Cellar"
                        },
                        new
                        {
                            Id = "21",
                            Name = "High Ceilings"
                        },
                        new
                        {
                            Id = "22",
                            Name = "Waterfront"
                        },
                        new
                        {
                            Id = "23",
                            Name = "Mountain View"
                        },
                        new
                        {
                            Id = "24",
                            Name = "City View"
                        },
                        new
                        {
                            Id = "25",
                            Name = "Skylights"
                        });
                });

            modelBuilder.Entity("Data.EntityModels.Hood", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hoods");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CityId = "1",
                            Name = "Manhattan"
                        },
                        new
                        {
                            Id = "2",
                            CityId = "1",
                            Name = "Brooklyn"
                        },
                        new
                        {
                            Id = "3",
                            CityId = "2",
                            Name = "Beverly Hills"
                        },
                        new
                        {
                            Id = "4",
                            CityId = "2",
                            Name = "Hollywood"
                        },
                        new
                        {
                            Id = "5",
                            CityId = "3",
                            Name = "Lincoln Park"
                        },
                        new
                        {
                            Id = "6",
                            CityId = "4",
                            Name = "Scarborough"
                        },
                        new
                        {
                            Id = "7",
                            CityId = "5",
                            Name = "West End"
                        },
                        new
                        {
                            Id = "8",
                            CityId = "6",
                            Name = "Soho"
                        },
                        new
                        {
                            Id = "9",
                            CityId = "6",
                            Name = "Camden"
                        },
                        new
                        {
                            Id = "10",
                            CityId = "8",
                            Name = "Kreuzberg"
                        },
                        new
                        {
                            Id = "11",
                            CityId = "8",
                            Name = "Charlottenburg"
                        },
                        new
                        {
                            Id = "12",
                            CityId = "10",
                            Name = "Montmartre"
                        },
                        new
                        {
                            Id = "13",
                            CityId = "10",
                            Name = "Le Marais"
                        },
                        new
                        {
                            Id = "14",
                            CityId = "13",
                            Name = "Gothic Quarter"
                        },
                        new
                        {
                            Id = "15",
                            CityId = "12",
                            Name = "Chamberí"
                        },
                        new
                        {
                            Id = "16",
                            CityId = "14",
                            Name = "Surry Hills"
                        },
                        new
                        {
                            Id = "17",
                            CityId = "14",
                            Name = "Bondi"
                        },
                        new
                        {
                            Id = "18",
                            CityId = "16",
                            Name = "Trastevere"
                        },
                        new
                        {
                            Id = "19",
                            CityId = "17",
                            Name = "Navigli"
                        },
                        new
                        {
                            Id = "20",
                            CityId = "18",
                            Name = "Shibuya"
                        },
                        new
                        {
                            Id = "21",
                            CityId = "18",
                            Name = "Shinjuku"
                        },
                        new
                        {
                            Id = "22",
                            CityId = "19",
                            Name = "Umeda"
                        },
                        new
                        {
                            Id = "23",
                            CityId = "20",
                            Name = "Liberdade"
                        },
                        new
                        {
                            Id = "24",
                            CityId = "20",
                            Name = "Ipanema"
                        },
                        new
                        {
                            Id = "25",
                            CityId = "20",
                            Name = "Copacabana"
                        },
                        new
                        {
                            Id = "26",
                            CityId = "1",
                            Name = "West Village"
                        },
                        new
                        {
                            Id = "27",
                            CityId = "4",
                            Name = "Chinatown"
                        },
                        new
                        {
                            Id = "28",
                            CityId = "5",
                            Name = "Gastown"
                        },
                        new
                        {
                            Id = "29",
                            CityId = "1",
                            Name = "Financial District"
                        },
                        new
                        {
                            Id = "30",
                            CityId = "1",
                            Name = "Harlem"
                        });
                });

            modelBuilder.Entity("Data.EntityModels.RealEs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AreaSize")
                        .HasColumnType("int");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<string>("YearBuilt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RoomId")
                        .IsUnique()
                        .HasFilter("[RoomId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("RealEs");
                });

            modelBuilder.Entity("Data.EntityModels.RealEsFeature", b =>
                {
                    b.Property<string>("FeatureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RealEsid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeatureId", "RealEsid");

                    b.HasIndex("RealEsid");

                    b.ToTable("RealEsFeatures");
                });

            modelBuilder.Entity("Data.EntityModels.RealEsImages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealEsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RealEsId");

                    b.ToTable("RealEsImages");
                });

            modelBuilder.Entity("Data.EntityModels.RealEsService", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RealEsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServiceId", "RealEsId");

                    b.HasIndex("RealEsId");

                    b.ToTable("RealEsServices");
                });

            modelBuilder.Entity("Data.EntityModels.Room", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NBathroom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NBedroom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NFloors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NGarage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NKitchen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NLivingRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NRooms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealEsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Data.EntityModels.Services", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.EntityModels.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("BDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Data.EntityModels.Address", b =>
                {
                    b.HasOne("Data.EntityModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.EntityModels.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId");

                    b.HasOne("Data.EntityModels.Hood", "Hood")
                        .WithMany("Addresses")
                        .HasForeignKey("HoodId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Hood");
                });

            modelBuilder.Entity("Data.EntityModels.City", b =>
                {
                    b.HasOne("Data.EntityModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Data.EntityModels.Comments", b =>
                {
                    b.HasOne("Data.EntityModels.RealEs", "RealEs")
                        .WithMany("Comments")
                        .HasForeignKey("RealEsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RealEs");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.EntityModels.Favorite", b =>
                {
                    b.HasOne("Data.EntityModels.RealEs", "RealEs")
                        .WithMany("Favorites")
                        .HasForeignKey("RealEsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RealEs");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.EntityModels.Hood", b =>
                {
                    b.HasOne("Data.EntityModels.City", "City")
                        .WithMany("Hoods")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Data.EntityModels.RealEs", b =>
                {
                    b.HasOne("Data.EntityModels.Address", "Address")
                        .WithOne("RealEs")
                        .HasForeignKey("Data.EntityModels.RealEs", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.EntityModels.Category", "Category")
                        .WithMany("RealEs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Room", "Room")
                        .WithOne("RealEs")
                        .HasForeignKey("Data.EntityModels.RealEs", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.EntityModels.User", "User")
                        .WithMany("RealEs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Category");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.EntityModels.RealEsFeature", b =>
                {
                    b.HasOne("Data.EntityModels.Feature", "Feature")
                        .WithMany("RealEsFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.RealEs", "RealEs")
                        .WithMany("RealEsFeatures")
                        .HasForeignKey("RealEsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("RealEs");
                });

            modelBuilder.Entity("Data.EntityModels.RealEsImages", b =>
                {
                    b.HasOne("Data.EntityModels.RealEs", "RealEs")
                        .WithMany("Images")
                        .HasForeignKey("RealEsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealEs");
                });

            modelBuilder.Entity("Data.EntityModels.RealEsService", b =>
                {
                    b.HasOne("Data.EntityModels.RealEs", "RealEs")
                        .WithMany("RealEsServices")
                        .HasForeignKey("RealEsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Services", "Service")
                        .WithMany("RealEsServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealEs");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Address", b =>
                {
                    b.Navigation("RealEs");
                });

            modelBuilder.Entity("Data.EntityModels.Category", b =>
                {
                    b.Navigation("RealEs");
                });

            modelBuilder.Entity("Data.EntityModels.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Hoods");
                });

            modelBuilder.Entity("Data.EntityModels.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Data.EntityModels.Feature", b =>
                {
                    b.Navigation("RealEsFeatures");
                });

            modelBuilder.Entity("Data.EntityModels.Hood", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Data.EntityModels.RealEs", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("RealEsFeatures");

                    b.Navigation("RealEsServices");
                });

            modelBuilder.Entity("Data.EntityModels.Room", b =>
                {
                    b.Navigation("RealEs")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Services", b =>
                {
                    b.Navigation("RealEsServices");
                });

            modelBuilder.Entity("Data.EntityModels.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("RealEs");
                });
#pragma warning restore 612, 618
        }
    }
}
